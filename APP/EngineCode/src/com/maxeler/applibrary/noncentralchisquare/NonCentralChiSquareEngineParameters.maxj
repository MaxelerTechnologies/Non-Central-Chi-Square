package com.maxeler.applibrary.noncentralchisquare;

import java.util.Date;

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEFloat;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.managers.DFEModel;

public class NonCentralChiSquareEngineParameters extends EngineParameters {

	private static final String board                = "DFEModel";
	private static final String isBuffGce            = "isBuffGce";
	private static final String isMultiCycleReset    = "isMultiCycleReset";
	private static final String CEReplication        = "CEReplication";
	private static final String maxFileName          = "maxFileName";
	private static final String target               = "target";
	private static final String MPPRRetryThreshold   = "MPPRRetryThreshold";
	private static final String MPPRThreads          = "MPPRThreads";
	private static final String streamFrequency      = "streamFrequency";
	private static final String memFrequency         = "memFrequency";
	private static final String tag                  = "tag";
	private static final String hasStreamStatus      = "hasStreamStatus";
	private static final String isPhaseClocks        = "isPhaseClocks";
	private static final String dspFactor            = "dspFactor";
	private static final String MPPRStartCT          = "MPPRStartCT";
	private static final String MPPREndCT            = "MPPREndCT";

	private static final String maximumDegree        = "maximumDegree";
	private static final String valueType            = "valueType";

	private final long m_timestamp = new Date().getTime();

	public NonCentralChiSquareEngineParameters(String[] argv) {
		super(argv);
	}

	public int getMaximumDegree() {
		return getParam(maximumDegree);
	}

	public DFEFloat getValueType() {
		return getParam(valueType);
	}

	public boolean getIsBuffGce() {
		return getParam(isBuffGce);
	}

	public boolean getIsMultiCycleReset() {
		return getParam(isMultiCycleReset);
	}

	public int getCEReplication() {
		return getParam(CEReplication);
	}

	public int getStreamFrequency() {
		return getParam(streamFrequency);
	}

	public int getMemFrequency() {
		return getParam(memFrequency);
	}

	public String getTag() {
		return getParam(tag);
	}

	public boolean getHasStreamStatus() {
		return getParam(hasStreamStatus);
	}

	public boolean getIsPhaseClocks() {
		return getParam(isPhaseClocks);
	}

	public double getDspFactor() {
		return getParam(dspFactor);
	}

	@Override
	protected void declarations() {
		/* Standard parameters */

		// naming
		declareParam(maxFileName, DataType.STRING, "NCChiSquare");
		declareParam(tag, DataType.STRING, "");

		// build parameters
		declareParam(target, Target.class, Target.DFE);
		declareParam(board,  DataType.DFEMODEL, DFEModel.VECTIS);
		declareParam(MPPRRetryThreshold, DataType.INT, 500);
		declareParam(MPPRThreads, DataType.INT, 4);
		declareParam(MPPRStartCT, DataType.INT, 1);
		declareParam(MPPREndCT,   DataType.INT, 8);
		declareParam(CEReplication, DataType.INT, 6);
		declareParam(isBuffGce, DataType.BOOL, true);
		declareParam(isMultiCycleReset, DataType.BOOL, true);
		declareParam(isPhaseClocks, DataType.BOOL, false);

		// common kernel parameters
		declareParam(streamFrequency, DataType.INT, 100);
		declareParam(memFrequency, DataType.INT, -1);
		declareParam(dspFactor, DataType.DOUBLE, 0.5);

		// for debugging
		declareParam(hasStreamStatus, DataType.BOOL, false);

		declareParam(maximumDegree, DataType.INT, 160);
		declareParam(valueType, DataType.DFEFLOAT,
				DFETypeFactory.dfeFloat(11, 53));
	}

	protected void writeConstants(NonCentralChiSquareManager manager) {
		manager.addMaxFileConstant(maximumDegree, getMaximumDegree());
	}

	@Override
	protected void validate() {

	}

	@Override
	public String getBuildName() {
		return String.format("%s_%s_%s_%dMHz_%dN_%d%s",
				getMaxFileName(), getDFEModel().toString(),
				getTarget().toString(),
				getParam(streamFrequency), getMaximumDegree(), m_timestamp,
				getTag());
	}

}
